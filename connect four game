class ConnectFour:
  def __init__(self):
      self.rows = 6
      self.columns = 7
      self.board = [[' ' for _ in range(self.columns)] for _ in range(self.rows)]
      self.current_player = 'X'

  def print_board(self):
      for row in self.board:
          print('|'.join(row))
          print('-' * (2 * self.columns - 1))
      print(' '.join(map(str, range(self.columns))))

  def make_move(self, column):
      if column < 0 or column >= self.columns or self.board[0][column] != ' ':
          return False

      for row in reversed(range(self.rows)):
          if self.board[row][column] == ' ':
              self.board[row][column] = self.current_player
              return True

      return False

  def check_winner(self, player):
      
      for row in range(self.rows):
          for col in range(self.columns - 3):
              if all(self.board[row][col + i] == player for i in range(4)):
                  return True

      for row in range(self.rows - 3):
          for col in range(self.columns):
              if all(self.board[row + i][col] == player for i in range(4)):
                  return True

      for row in range(self.rows - 3):
          for col in range(self.columns - 3):
              if all(self.board[row + i][col + i] == player for i in range(4)):
                  return True

      for row in range(3, self.rows):
          for col in range(self.columns - 3):
              if all(self.board[row - i][col + i] == player for i in range(4)):
                  return True

      return False

  def switch_player(self):
      self.current_player = 'O' if self.current_player == 'X' else 'X'

  def is_full(self):
      return all(self.board[0][col] != ' ' for col in range(self.columns))

  def play_game(self):
      print("Welcome to Connect Four!")
      self.print_board()

      while True:
          try:
              column = int(input(f"Player {self.current_player}, choose a column (0-{self.columns - 1}): "))
          except ValueError:
              print("Invalid input. Please enter a number.")
              continue

          if not self.make_move(column):
              print("Invalid move. Try again.")
              continue

          self.print_board()

          if self.check_winner(self.current_player):
              print(f"Player {self.current_player} wins!")
              break

          if self.is_full():
              print("The game is a tie!")
              break

          self.switch_player()

if __name__ == "__main__":
  game = ConnectFour()
  game.play_game()
